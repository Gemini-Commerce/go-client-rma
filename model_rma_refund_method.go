/*
RMA Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rma

import (
	"encoding/json"
	"fmt"
)

// RmaRefundMethod the model 'RmaRefundMethod'
type RmaRefundMethod string

// List of rmaRefundMethod
const (
	RMAREFUNDMETHOD_UNKNOWN RmaRefundMethod = "REFUND_METHOD_UNKNOWN"
	RMAREFUNDMETHOD_OFFLINE RmaRefundMethod = "REFUND_METHOD_OFFLINE"
	RMAREFUNDMETHOD_COUPON RmaRefundMethod = "REFUND_METHOD_COUPON"
	RMAREFUNDMETHOD_SAME_AS_PAYMENT RmaRefundMethod = "REFUND_METHOD_SAME_AS_PAYMENT"
)

// All allowed values of RmaRefundMethod enum
var AllowedRmaRefundMethodEnumValues = []RmaRefundMethod{
	"REFUND_METHOD_UNKNOWN",
	"REFUND_METHOD_OFFLINE",
	"REFUND_METHOD_COUPON",
	"REFUND_METHOD_SAME_AS_PAYMENT",
}

func (v *RmaRefundMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RmaRefundMethod(value)
	for _, existing := range AllowedRmaRefundMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RmaRefundMethod", value)
}

// NewRmaRefundMethodFromValue returns a pointer to a valid RmaRefundMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRmaRefundMethodFromValue(v string) (*RmaRefundMethod, error) {
	ev := RmaRefundMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RmaRefundMethod: valid values are %v", v, AllowedRmaRefundMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RmaRefundMethod) IsValid() bool {
	for _, existing := range AllowedRmaRefundMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rmaRefundMethod value
func (v RmaRefundMethod) Ptr() *RmaRefundMethod {
	return &v
}

type NullableRmaRefundMethod struct {
	value *RmaRefundMethod
	isSet bool
}

func (v NullableRmaRefundMethod) Get() *RmaRefundMethod {
	return v.value
}

func (v *NullableRmaRefundMethod) Set(val *RmaRefundMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableRmaRefundMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableRmaRefundMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRmaRefundMethod(val *RmaRefundMethod) *NullableRmaRefundMethod {
	return &NullableRmaRefundMethod{value: val, isSet: true}
}

func (v NullableRmaRefundMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRmaRefundMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

