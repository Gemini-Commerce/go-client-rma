/*
RMA Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rma

import (
	"encoding/json"
	"time"
)

// checks if the RmaOrderData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RmaOrderData{}

// RmaOrderData struct for RmaOrderData
type RmaOrderData struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Grn *string `json:"grn,omitempty"`
	Number *string `json:"number,omitempty"`
	Status *string `json:"status,omitempty"`
	Channel *string `json:"channel,omitempty"`
	Market *string `json:"market,omitempty"`
	Items []RmaOrderDataItem `json:"items,omitempty"`
	Currency *RmaCurrency `json:"currency,omitempty"`
	Subtotals *map[string]OrderDataSubtotal `json:"subtotals,omitempty"`
	Totals *map[string]OrderDataTotal `json:"totals,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RmaOrderData RmaOrderData

// NewRmaOrderData instantiates a new RmaOrderData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRmaOrderData() *RmaOrderData {
	this := RmaOrderData{}
	var currency RmaCurrency = RMACURRENCY_XXX
	this.Currency = &currency
	return &this
}

// NewRmaOrderDataWithDefaults instantiates a new RmaOrderData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRmaOrderDataWithDefaults() *RmaOrderData {
	this := RmaOrderData{}
	var currency RmaCurrency = RMACURRENCY_XXX
	this.Currency = &currency
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RmaOrderData) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RmaOrderData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *RmaOrderData) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RmaOrderData) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RmaOrderData) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *RmaOrderData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetGrn returns the Grn field value if set, zero value otherwise.
func (o *RmaOrderData) GetGrn() string {
	if o == nil || IsNil(o.Grn) {
		var ret string
		return ret
	}
	return *o.Grn
}

// GetGrnOk returns a tuple with the Grn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetGrnOk() (*string, bool) {
	if o == nil || IsNil(o.Grn) {
		return nil, false
	}
	return o.Grn, true
}

// HasGrn returns a boolean if a field has been set.
func (o *RmaOrderData) HasGrn() bool {
	if o != nil && !IsNil(o.Grn) {
		return true
	}

	return false
}

// SetGrn gets a reference to the given string and assigns it to the Grn field.
func (o *RmaOrderData) SetGrn(v string) {
	o.Grn = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *RmaOrderData) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *RmaOrderData) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *RmaOrderData) SetNumber(v string) {
	o.Number = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RmaOrderData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RmaOrderData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RmaOrderData) SetStatus(v string) {
	o.Status = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *RmaOrderData) GetChannel() string {
	if o == nil || IsNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetChannelOk() (*string, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *RmaOrderData) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *RmaOrderData) SetChannel(v string) {
	o.Channel = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *RmaOrderData) GetMarket() string {
	if o == nil || IsNil(o.Market) {
		var ret string
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetMarketOk() (*string, bool) {
	if o == nil || IsNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *RmaOrderData) HasMarket() bool {
	if o != nil && !IsNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given string and assigns it to the Market field.
func (o *RmaOrderData) SetMarket(v string) {
	o.Market = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *RmaOrderData) GetItems() []RmaOrderDataItem {
	if o == nil || IsNil(o.Items) {
		var ret []RmaOrderDataItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetItemsOk() ([]RmaOrderDataItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *RmaOrderData) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []RmaOrderDataItem and assigns it to the Items field.
func (o *RmaOrderData) SetItems(v []RmaOrderDataItem) {
	o.Items = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *RmaOrderData) GetCurrency() RmaCurrency {
	if o == nil || IsNil(o.Currency) {
		var ret RmaCurrency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetCurrencyOk() (*RmaCurrency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *RmaOrderData) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given RmaCurrency and assigns it to the Currency field.
func (o *RmaOrderData) SetCurrency(v RmaCurrency) {
	o.Currency = &v
}

// GetSubtotals returns the Subtotals field value if set, zero value otherwise.
func (o *RmaOrderData) GetSubtotals() map[string]OrderDataSubtotal {
	if o == nil || IsNil(o.Subtotals) {
		var ret map[string]OrderDataSubtotal
		return ret
	}
	return *o.Subtotals
}

// GetSubtotalsOk returns a tuple with the Subtotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetSubtotalsOk() (*map[string]OrderDataSubtotal, bool) {
	if o == nil || IsNil(o.Subtotals) {
		return nil, false
	}
	return o.Subtotals, true
}

// HasSubtotals returns a boolean if a field has been set.
func (o *RmaOrderData) HasSubtotals() bool {
	if o != nil && !IsNil(o.Subtotals) {
		return true
	}

	return false
}

// SetSubtotals gets a reference to the given map[string]OrderDataSubtotal and assigns it to the Subtotals field.
func (o *RmaOrderData) SetSubtotals(v map[string]OrderDataSubtotal) {
	o.Subtotals = &v
}

// GetTotals returns the Totals field value if set, zero value otherwise.
func (o *RmaOrderData) GetTotals() map[string]OrderDataTotal {
	if o == nil || IsNil(o.Totals) {
		var ret map[string]OrderDataTotal
		return ret
	}
	return *o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaOrderData) GetTotalsOk() (*map[string]OrderDataTotal, bool) {
	if o == nil || IsNil(o.Totals) {
		return nil, false
	}
	return o.Totals, true
}

// HasTotals returns a boolean if a field has been set.
func (o *RmaOrderData) HasTotals() bool {
	if o != nil && !IsNil(o.Totals) {
		return true
	}

	return false
}

// SetTotals gets a reference to the given map[string]OrderDataTotal and assigns it to the Totals field.
func (o *RmaOrderData) SetTotals(v map[string]OrderDataTotal) {
	o.Totals = &v
}

func (o RmaOrderData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RmaOrderData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Grn) {
		toSerialize["grn"] = o.Grn
	}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Subtotals) {
		toSerialize["subtotals"] = o.Subtotals
	}
	if !IsNil(o.Totals) {
		toSerialize["totals"] = o.Totals
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RmaOrderData) UnmarshalJSON(data []byte) (err error) {
	varRmaOrderData := _RmaOrderData{}

	err = json.Unmarshal(data, &varRmaOrderData)

	if err != nil {
		return err
	}

	*o = RmaOrderData(varRmaOrderData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "grn")
		delete(additionalProperties, "number")
		delete(additionalProperties, "status")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "market")
		delete(additionalProperties, "items")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "subtotals")
		delete(additionalProperties, "totals")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *RmaOrderData) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *RmaOrderData) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullableRmaOrderData struct {
	value *RmaOrderData
	isSet bool
}

func (v NullableRmaOrderData) Get() *RmaOrderData {
	return v.value
}

func (v *NullableRmaOrderData) Set(val *RmaOrderData) {
	v.value = val
	v.isSet = true
}

func (v NullableRmaOrderData) IsSet() bool {
	return v.isSet
}

func (v *NullableRmaOrderData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRmaOrderData(val *RmaOrderData) *NullableRmaOrderData {
	return &NullableRmaOrderData{value: val, isSet: true}
}

func (v NullableRmaOrderData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRmaOrderData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


