/*
RMA Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rma

import (
	"encoding/json"
	"fmt"
)

// OrderDataSubtotalCode  - ITEMS: gross discount items amount.  - ITEMS_DISCOUNTED: discounted items amount.  - DISCOUNT: discount amount. It is a NEGATIVE amount.
type OrderDataSubtotalCode string

// List of OrderDataSubtotalCode
const (
	ORDERDATASUBTOTALCODE_UNKNOWN          OrderDataSubtotalCode = "UNKNOWN"
	ORDERDATASUBTOTALCODE_PAYMENT          OrderDataSubtotalCode = "PAYMENT"
	ORDERDATASUBTOTALCODE_SHIPMENT         OrderDataSubtotalCode = "SHIPMENT"
	ORDERDATASUBTOTALCODE_TAX              OrderDataSubtotalCode = "TAX"
	ORDERDATASUBTOTALCODE_ITEMS            OrderDataSubtotalCode = "ITEMS"
	ORDERDATASUBTOTALCODE_ITEMS_DISCOUNTED OrderDataSubtotalCode = "ITEMS_DISCOUNTED"
	ORDERDATASUBTOTALCODE_DISCOUNT         OrderDataSubtotalCode = "DISCOUNT"
)

// All allowed values of OrderDataSubtotalCode enum
var AllowedOrderDataSubtotalCodeEnumValues = []OrderDataSubtotalCode{
	"UNKNOWN",
	"PAYMENT",
	"SHIPMENT",
	"TAX",
	"ITEMS",
	"ITEMS_DISCOUNTED",
	"DISCOUNT",
}

func (v *OrderDataSubtotalCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderDataSubtotalCode(value)
	for _, existing := range AllowedOrderDataSubtotalCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderDataSubtotalCode", value)
}

// NewOrderDataSubtotalCodeFromValue returns a pointer to a valid OrderDataSubtotalCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderDataSubtotalCodeFromValue(v string) (*OrderDataSubtotalCode, error) {
	ev := OrderDataSubtotalCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderDataSubtotalCode: valid values are %v", v, AllowedOrderDataSubtotalCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderDataSubtotalCode) IsValid() bool {
	for _, existing := range AllowedOrderDataSubtotalCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderDataSubtotalCode value
func (v OrderDataSubtotalCode) Ptr() *OrderDataSubtotalCode {
	return &v
}

type NullableOrderDataSubtotalCode struct {
	value *OrderDataSubtotalCode
	isSet bool
}

func (v NullableOrderDataSubtotalCode) Get() *OrderDataSubtotalCode {
	return v.value
}

func (v *NullableOrderDataSubtotalCode) Set(val *OrderDataSubtotalCode) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDataSubtotalCode) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDataSubtotalCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDataSubtotalCode(val *OrderDataSubtotalCode) *NullableOrderDataSubtotalCode {
	return &NullableOrderDataSubtotalCode{value: val, isSet: true}
}

func (v NullableOrderDataSubtotalCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDataSubtotalCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
